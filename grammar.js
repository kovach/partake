// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
function id(x) { return x[0]; }
let Lexer = undefined;
let ParserRules = [
    {"name": "_", "symbols": []},
    {"name": "_", "symbols": ["_", /[\s]/], "postprocess": function() {}},
    {"name": "__", "symbols": [/[\s]/]},
    {"name": "__", "symbols": ["__", /[\s]/], "postprocess": function() {}},
    {"name": "comma", "symbols": ["_", {"literal":","}, "_"], "postprocess": () => null},
    {"name": "op", "symbols": [{"literal":"("}, "_"], "postprocess": () => null},
    {"name": "cp", "symbols": ["_", {"literal":")"}], "postprocess": () => null},
    {"name": "number$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$1", "symbols": ["number$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$1"], "postprocess": d => parseInt(d[0].join(""))},
    {"name": "identifier$ebnf$1", "symbols": []},
    {"name": "identifier$ebnf$1", "symbols": ["identifier$ebnf$1", /[\/'_\-a-zA-Z0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "identifier", "symbols": [/[a-zA-Z_]/, "identifier$ebnf$1"], "postprocess": (d) => d[0] + d[1].join("")},
    {"name": "var", "symbols": ["identifier"], "postprocess": id},
    {"name": "predicate", "symbols": [{"literal":"!"}, "identifier"], "postprocess": (d) => ("!"+d[1])},
    {"name": "predicate", "symbols": ["identifier"], "postprocess": id},
    {"name": "predicate", "symbols": ["local_predicate"], "postprocess": id},
    {"name": "predicate", "symbols": ["extern_predicate"], "postprocess": id},
    {"name": "predicate", "symbols": ["lifted_predicate"], "postprocess": id},
    {"name": "local_predicate", "symbols": [{"literal":"*"}, "identifier"], "postprocess": (d) => ("*"+d[1])},
    {"name": "extern_predicate", "symbols": [{"literal":"@"}, "identifier"], "postprocess": (d) => ("@"+d[1])},
    {"name": "lifted_predicate", "symbols": [{"literal":"^"}, "identifier"], "postprocess": (d) => ("^"+d[1])},
    {"name": "arg_list", "symbols": [], "postprocess": (d) => ([])},
    {"name": "arg_list$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}, "_", "arg_list"]},
    {"name": "arg_list$ebnf$1", "symbols": ["arg_list$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "arg_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "arg_list", "symbols": ["term", "arg_list$ebnf$1"], "postprocess":  (d) => {
          let rest = (d[1] !== null) ? d[1][3] : []
          return [d[0]].concat(rest)
        } },
    {"name": "fn_call", "symbols": [{"literal":"@"}, "identifier", "_", {"literal":"("}, "_", "arg_list", "_", {"literal":")"}], "postprocess": (d) => ({tag :'call', fn: d[1], args: d[5]})},
    {"name": "binding", "symbols": ["var", "_", {"literal":":"}, "_", "term"], "postprocess": (d) => [d[0], d[4]]},
    {"name": "binding_list", "symbols": [], "postprocess": () => []},
    {"name": "binding_list$ebnf$1$subexpression$1", "symbols": ["comma", "binding_list"]},
    {"name": "binding_list$ebnf$1", "symbols": ["binding_list$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "binding_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "binding_list", "symbols": ["binding", "binding_list$ebnf$1"], "postprocess": (d) => [d[0], ...(d[1] ? d[1][1] : [])]},
    {"name": "binding_expr", "symbols": [{"literal":"{"}, "_", "binding_list", "_", {"literal":"}"}], "postprocess": (d) => ({tag: 'preBind', value: d[2]})},
    {"name": "indexical_expr", "symbols": [{"literal":"~"}, "identifier"], "postprocess": (d) => ({tag: 'indexical', value: d[1]})},
    {"name": "term", "symbols": ["op", "_", {"literal":"-"}, "_", "term", "cp"], "postprocess": (d) => ({tag: 'neg', value: d[4]})},
    {"name": "term", "symbols": ["var"], "postprocess": (d) => ({tag: 'var', value: d[0]})},
    {"name": "term$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "term$ebnf$1", "symbols": ["term$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "term", "symbols": ["term$ebnf$1"], "postprocess": (d) => ({tag: 'int', value: parseInt(d[0].join(""))})},
    {"name": "term", "symbols": [{"literal":"'"}, "identifier"], "postprocess": (d) => ({tag: 'sym', value: d[1]})},
    {"name": "term", "symbols": ["term", {"literal":"."}, "identifier"], "postprocess": (d) => ({tag: 'dot', left: d[0], right: d[2]})},
    {"name": "term", "symbols": [{"literal":"."}, "predicate"], "postprocess": (d) => ({tag: 'dot', left: null, right: d[1]})},
    {"name": "term", "symbols": ["fn_call"], "postprocess": id},
    {"name": "term", "symbols": ["binding_expr"], "postprocess": id},
    {"name": "term", "symbols": ["indexical_expr"], "postprocess": id},
    {"name": "relation$ebnf$1", "symbols": []},
    {"name": "relation$ebnf$1$subexpression$1", "symbols": ["__", "term"]},
    {"name": "relation$ebnf$1", "symbols": ["relation$ebnf$1", "relation$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "relation", "symbols": ["predicate", "relation$ebnf$1"], "postprocess": (d) => ({tag: d[0], terms: d[1].map(t => t[1]).concat([{tag: 'int', value: 1}])})},
    {"name": "relation$ebnf$2", "symbols": []},
    {"name": "relation$ebnf$2$subexpression$1", "symbols": ["__", "term"]},
    {"name": "relation$ebnf$2", "symbols": ["relation$ebnf$2", "relation$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "relation$string$1", "symbols": [{"literal":"-"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "relation", "symbols": ["predicate", "relation$ebnf$2", "_", "relation$string$1", "_", "term"], "postprocess": (d) => ({tag: d[0], terms: d[1].map(t => t[1]).concat([d[5]])})},
    {"name": "relation_list$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}]},
    {"name": "relation_list$ebnf$1", "symbols": ["relation_list$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "relation_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "relation_list", "symbols": ["relation", "relation_list$ebnf$1"], "postprocess": (d) => [d[0]]},
    {"name": "relation_list", "symbols": ["relation", "comma", "relation_list"], "postprocess": (d) => [d[0]].concat(d[2])},
    {"name": "pure_query", "symbols": [], "postprocess": () => []},
    {"name": "pure_query", "symbols": ["relation_list"], "postprocess": id},
    {"name": "bin_op$string$1", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "bin_op", "symbols": ["bin_op$string$1"], "postprocess": id},
    {"name": "bin_op$string$2", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "bin_op", "symbols": ["bin_op$string$2"], "postprocess": id},
    {"name": "bin_op", "symbols": [{"literal":"<"}], "postprocess": id},
    {"name": "bin_op", "symbols": [{"literal":">"}], "postprocess": id},
    {"name": "bin_op", "symbols": [{"literal":"="}], "postprocess": id},
    {"name": "derivation$string$1", "symbols": [{"literal":"-"}, {"literal":"-"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "derivation$ebnf$1", "symbols": []},
    {"name": "derivation$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "derivation$ebnf$1", "symbols": ["derivation$ebnf$1", "derivation$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "derivation", "symbols": ["derivation$string$1", "derivation$ebnf$1", "_", "relation_list", "_", {"literal":"."}], "postprocess": (d) => ({head: d[3], body: [], type: 'dyn'})},
    {"name": "derivation$string$2", "symbols": [{"literal":"-"}, {"literal":"-"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "derivation$ebnf$2", "symbols": []},
    {"name": "derivation$ebnf$2$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "derivation$ebnf$2", "symbols": ["derivation$ebnf$2", "derivation$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "derivation", "symbols": ["relation_list", "_", "derivation$string$2", "derivation$ebnf$2", "_", "relation_list", "_", {"literal":"."}], "postprocess": (d) => ({head: d[5], body: d[0], type: 'dyn'})},
    {"name": "rule_command", "symbols": ["fn_call"], "postprocess": id},
    {"name": "rule_derivation$string$1", "symbols": [{"literal":">"}, {"literal":">"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "rule_derivation$ebnf$1", "symbols": []},
    {"name": "rule_derivation$ebnf$1$subexpression$1", "symbols": [{"literal":">"}]},
    {"name": "rule_derivation$ebnf$1", "symbols": ["rule_derivation$ebnf$1", "rule_derivation$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "rule_derivation", "symbols": ["rule_derivation$string$1", "rule_derivation$ebnf$1", "_", "relation_list", "_", {"literal":"."}], "postprocess": (d) => ({head: d[3], body: [], type: 'imp'})},
    {"name": "rule_derivation$string$2", "symbols": [{"literal":">"}, {"literal":">"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "rule_derivation$ebnf$2", "symbols": []},
    {"name": "rule_derivation$ebnf$2$subexpression$1", "symbols": [{"literal":">"}]},
    {"name": "rule_derivation$ebnf$2", "symbols": ["rule_derivation$ebnf$2", "rule_derivation$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "rule_derivation", "symbols": ["relation_list", "_", "rule_derivation$string$2", "rule_derivation$ebnf$2", "_", "relation_list", "_", {"literal":"."}], "postprocess": (d) => ({head: d[5], body: d[0], type: 'imp'})},
    {"name": "rule_derivation$string$3", "symbols": [{"literal":">"}, {"literal":">"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "rule_derivation$ebnf$3", "symbols": []},
    {"name": "rule_derivation$ebnf$3$subexpression$1", "symbols": [{"literal":">"}]},
    {"name": "rule_derivation$ebnf$3", "symbols": ["rule_derivation$ebnf$3", "rule_derivation$ebnf$3$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "rule_derivation", "symbols": ["relation_list", "_", "rule_derivation$string$3", "rule_derivation$ebnf$3", "_", "rule_command", "_", {"literal":"."}], "postprocess": (d) => ({head: d[5], body: d[0], type: 'command'})},
    {"name": "_derivation", "symbols": ["rule_derivation"], "postprocess": id},
    {"name": "_derivation", "symbols": ["derivation"], "postprocess": id},
    {"name": "derivation_block$ebnf$1", "symbols": []},
    {"name": "derivation_block$ebnf$1$subexpression$1", "symbols": ["_", "_derivation"]},
    {"name": "derivation_block$ebnf$1", "symbols": ["derivation_block$ebnf$1", "derivation_block$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "derivation_block", "symbols": ["derivation_block$ebnf$1", "_"], "postprocess": (d) => d[0].map((r) => r[1])},
    {"name": "quantifier", "symbols": ["number"], "postprocess": (d) => ({tag: 'eq', count: d[0]})},
    {"name": "quantifier$string$1", "symbols": [{"literal":"r"}, {"literal":"a"}, {"literal":"n"}, {"literal":"d"}, {"literal":"o"}, {"literal":"m"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "quantifier", "symbols": ["op", "quantifier$string$1", "_", "number", "cp"], "postprocess": (d) => ({tag: 'random', count: d[3]})},
    {"name": "event_expr", "symbols": ["identifier"], "postprocess": (d) => ({ tag: "literal", name: d[0]})},
    {"name": "event_expr", "symbols": ["identifier", "_", {"literal":"["}, "_", "pure_query", "_", {"literal":"]"}], "postprocess": (d) => ({ tag: "with-tuples", name: d[0], tuples: d[4]})},
    {"name": "branch_option", "symbols": ["identifier", "_", {"literal":":"}, "_", "rule_body"], "postprocess": (d) => ({id:d[0], body: d[4]})},
    {"name": "temporal_spec", "symbols": ["identifier"], "postprocess": id},
    {"name": "episode_expr", "symbols": [{"literal":"~"}, "event_expr"], "postprocess": (d) => [{tag: "do", value: d[1]}]},
    {"name": "episode_expr", "symbols": ["relation"], "postprocess": (d) => [{ tag: "observation", pattern: d[0]}]},
    {"name": "episode_expr", "symbols": [{"literal":"+"}, "relation"], "postprocess": (d) => [{tag: "assert", tuple: d[1] }]},
    {"name": "episode_expr$string$1", "symbols": [{"literal":"+"}, {"literal":"["}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "episode_expr", "symbols": ["episode_expr$string$1", "_", "temporal_spec", "_", {"literal":"]"}, "_", "relation"], "postprocess": (d) => [{tag: "assert", when: d[2], tuple: d[6] }]},
    {"name": "episode_expr$string$2", "symbols": [{"literal":"c"}, {"literal":"h"}, {"literal":"o"}, {"literal":"o"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "episode_expr", "symbols": ["episode_expr$string$2", "__", "quantifier", "__", "op", "pure_query", "cp"], "postprocess": (d) => [{ tag: "choose", quantifier: d[2], value: {query: d[5]} }]},
    {"name": "episode_expr$string$3", "symbols": [{"literal":"b"}, {"literal":"r"}, {"literal":"a"}, {"literal":"n"}, {"literal":"c"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "episode_expr$ebnf$1", "symbols": []},
    {"name": "episode_expr$ebnf$1$subexpression$1", "symbols": ["_", "op", "branch_option", "cp"]},
    {"name": "episode_expr$ebnf$1", "symbols": ["episode_expr$ebnf$1", "episode_expr$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "episode_expr", "symbols": ["episode_expr$string$3", "_", {"literal":"("}, "episode_expr$ebnf$1", "cp"], "postprocess": (d) => [{ tag: "branch", value: d[3].map((d) => d[2]) }]},
    {"name": "episode_expr", "symbols": ["op", "rule_body", "cp"], "postprocess": (d) => [{tag: "subStory", story: d[1] }]},
    {"name": "episode_expr$string$4", "symbols": [{"literal":"i"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "episode_expr", "symbols": ["episode_expr$string$4", "_", "op", "pure_query", "cp"], "postprocess": (d) => [{ tag: "countIf", value: d[3] }]},
    {"name": "episode_expr$string$5", "symbols": [{"literal":"n"}, {"literal":"o"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "episode_expr", "symbols": ["episode_expr$string$5", "_", "op", "pure_query", "cp"], "postprocess": (d) => [{ tag: "countNot", value: d[3] }]},
    {"name": "episode_expr$string$6", "symbols": [{"literal":":"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "episode_expr", "symbols": [{"literal":"~"}, "identifier", "_", "episode_expr$string$6", "_", "term"], "postprocess": (d) => [{ tag: "deictic", id: d[1], value: d[5] }]},
    {"name": "episode_list$ebnf$1$subexpression$1", "symbols": ["_", {"literal":","}]},
    {"name": "episode_list$ebnf$1", "symbols": ["episode_list$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "episode_list$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "episode_list", "symbols": ["episode_expr", "episode_list$ebnf$1"], "postprocess": (d) => d[0]},
    {"name": "episode_list", "symbols": ["episode_expr", "comma", "episode_list"], "postprocess": (d) => d[0].concat(d[2])},
    {"name": "rule_body", "symbols": ["episode_list"], "postprocess": id},
    {"name": "rule_body", "symbols": [], "postprocess": () => []},
    {"name": "rule_separator", "symbols": ["_", {"literal":":"}, "_"], "postprocess": id},
    {"name": "trigger", "symbols": [{"literal":"!"}, "identifier"], "postprocess": (d) => ({type: 'before', predicate: d[1]})},
    {"name": "trigger", "symbols": ["identifier"], "postprocess": (d) => ({type: 'during', predicate: d[0]})},
    {"name": "trigger", "symbols": ["identifier", {"literal":"!"}], "postprocess": (d) => ({type: 'after', predicate: d[0]})},
    {"name": "rule_header", "symbols": [{"literal":"{"}, "_", "identifier", "_", {"literal":"}"}, "_", "trigger", {"literal":":"}], "postprocess": (d) => ({id: d[2], trigger: d[6] })},
    {"name": "rule_header", "symbols": ["trigger", {"literal":":"}], "postprocess": (d) => ({id: d[0].predicate, trigger: d[0] })},
    {"name": "rule", "symbols": ["rule_header", "_", "rule_body", "_", {"literal":"."}], "postprocess": (d) => ({header: d[0], body: d[2] })},
    {"name": "program$ebnf$1", "symbols": []},
    {"name": "program$ebnf$1$subexpression$1", "symbols": ["_", "rule"]},
    {"name": "program$ebnf$1", "symbols": ["program$ebnf$1", "program$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "program", "symbols": ["program$ebnf$1", "_"], "postprocess": (d) => d[0].map((r) => r[1])},
    {"name": "main", "symbols": ["program", "_"], "postprocess": id}
];
let ParserStart = "_";
export default { Lexer, ParserRules, ParserStart };
